import Foundation

class InstallerImpl: NSObject, Helper {
    
    var client: InstallationClient?
    
    func install() {
        NSLog("[SMJBS]: \(#function)")
        client?.installationDidReachProgress(1, description: "Finished!")
    }
    
    func uninstall() {
        NSLog("[SMJBS]: \(#function)")
                
        // 1. Remove all the client files
        // 2. Kill all the processes
        // 3. Remove the Privileged Helper executable in /Library/PrivilegedHelperTools
        // 4. Remove the autogenerated plist file in /Library/LaunchDaemons
        // 5. At last, remove the Privileged Helper registration from the launchd daemon via
        // * SMJobRemove() or
        // `NSTask` (Objective-C) or `Process` (Swift) with `launchctl bootout system/com.smjobblesssample.installer`
        // from the Privileged Helper
        // To remove registration manually, use the same command in Terminal, adding `sudo` at the beginning.
        // It also kills the process.
        //
        // When debugging, check if the Helper has been unloaded successfully by running
        // `sudo launchctl list | grep com.smjobblesssample.installer`
        // in Terminal. The output should not contain th Helper label.
        
        let files = [
            URL(fileURLWithPath: "/Library/LaunchDaemons/\(Constant.helperMachLabel).plist"),
            URL(fileURLWithPath: "/Library/PrivilegedHelperTools/\(Constant.helperMachLabel)"),
            URL(fileURLWithPath: "/private/etc/SMJobBlessDemo.txt"),
        ]
        files.forEach { url in
            do {
                try FileManager.default.removeItem(at: url)
            } catch {
                print(error.localizedDescription)
            }
        }
    }
    
    func exportFile(contents: String) {
        do {
            try "hogehoge".write(toFile: "/private/etc/SMJobBlessDemo.txt",
                                 atomically: true,
                                 encoding: .utf8)
        } catch {
            print(error.localizedDescription)
        }
    }
    
}

